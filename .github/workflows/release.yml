name: Release

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v2.1.3 등과 같은 태그가 푸시될 때 실행
  workflow_dispatch:  # 수동으로 실행할 수 있도록 설정

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리를 가져와서 태그 정보를 정확히 가져옴

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Get version from tag
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        fi

    - name: Build for all platforms
      run: |
        make clean
        make build-all
        echo "Build completed for all platforms"

    - name: Create checksums
      run: |
        find dist -name "ktail-*" -type f -exec sha256sum {} \; > dist/checksums.txt
        echo "Checksums created"

    - name: Create release archive
      run: |
        mkdir -p release
        
        # Check if dist directory exists and has files
        if [ ! -d "dist" ] || [ -z "$(ls -A dist 2>/dev/null)" ]; then
          echo "Error: dist directory is empty or does not exist"
          ls -la
          exit 1
        fi
        
        # List files in dist directory for debugging
        echo "Files in dist directory:"
        ls -la dist/
        
        # Linux binaries
        LINUX_FILES=$(ls dist/ktail-linux-* 2>/dev/null || true)
        if [ -n "$LINUX_FILES" ]; then
          tar -czf release/ktail-linux.tar.gz -C dist $(basename -a $LINUX_FILES)
          echo "Created ktail-linux.tar.gz with files: $LINUX_FILES"
        else
          echo "Warning: No Linux binaries found"
        fi
        
        # macOS binaries  
        DARWIN_FILES=$(ls dist/ktail-darwin-* 2>/dev/null || true)
        if [ -n "$DARWIN_FILES" ]; then
          tar -czf release/ktail-darwin.tar.gz -C dist $(basename -a $DARWIN_FILES)
          echo "Created ktail-darwin.tar.gz with files: $DARWIN_FILES"
        else
          echo "Warning: No macOS binaries found"
        fi
        
        # Windows binaries
        WINDOWS_FILES=$(ls dist/ktail-windows-* 2>/dev/null || true)
        if [ -n "$WINDOWS_FILES" ]; then
          zip -r release/ktail-windows.zip -j dist/ktail-windows-*
          echo "Created ktail-windows.zip with files: $WINDOWS_FILES"
        else
          echo "Warning: No Windows binaries found"
        fi
        
        
        # All binaries archive
        ALL_FILES=$(ls dist/ktail-* 2>/dev/null || true)
        if [ -n "$ALL_FILES" ]; then
          tar -czf release/ktail-all.tar.gz -C dist $(basename -a $ALL_FILES) checksums.txt
          echo "Created ktail-all.tar.gz with files: $ALL_FILES"
        else
          echo "Warning: No binaries found for all-platforms archive"
        fi
        
        echo "Release archives created"
        ls -la release/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          release/ktail-linux.tar.gz
          release/ktail-darwin.tar.gz
          release/ktail-windows.zip
          release/ktail-all.tar.gz
          dist/checksums.txt
        body: |
          ## ktail ${{ steps.version.outputs.VERSION }}
          
          ### Downloads
          - **Linux**: `ktail-linux.tar.gz` (includes amd64, arm64, 386, arm)
          - **macOS**: `ktail-darwin.tar.gz` (includes amd64, arm64)
          - **Windows**: `ktail-windows.zip` (includes amd64, 386, arm64)
          - **All platforms**: `ktail-all.tar.gz` (includes all binaries)
          
          ### Installation
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Move the binary to your PATH (e.g., `/usr/local/bin/`)
          4. Make it executable: `chmod +x ktail`
          
          ### Verification
          Use the provided `checksums.txt` file to verify the integrity of the downloaded files:
          ```bash
          sha256sum -c checksums.txt
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ktail-binaries-${{ steps.version.outputs.VERSION }}
        path: |
          dist/
          release/
        retention-days: 30
